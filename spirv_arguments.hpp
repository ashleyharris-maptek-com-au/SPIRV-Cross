
/*
 * Copyright 2018-2019 Ashley Harris (Maptek Australia Pty Ltd)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Some useful functions to analyse an instruction.
//
// This file is autogenerated from spirv.core.grammar.parser.py from
// spirv.core.grammar.json.

#ifndef SPIRV_ARGUMENTS_HPP
#define SPIRV_ARGUMENTS_HPP

#include "spirv.hpp"

#include <cstdint>
#include <initializer_list>

namespace spirv_cross
{

// Returns true if an operation has a return value.
constexpr bool has_result(spv::Op op)
{
	switch (op)
	{
	case spv::OpUndef:
	case spv::OpExtInst:
	case spv::OpConstantTrue:
	case spv::OpConstantFalse:
	case spv::OpConstant:
	case spv::OpConstantComposite:
	case spv::OpConstantSampler:
	case spv::OpConstantNull:
	case spv::OpSpecConstantTrue:
	case spv::OpSpecConstantFalse:
	case spv::OpSpecConstant:
	case spv::OpSpecConstantComposite:
	case spv::OpSpecConstantOp:
	case spv::OpFunction:
	case spv::OpFunctionParameter:
	case spv::OpFunctionCall:
	case spv::OpVariable:
	case spv::OpImageTexelPointer:
	case spv::OpLoad:
	case spv::OpAccessChain:
	case spv::OpInBoundsAccessChain:
	case spv::OpPtrAccessChain:
	case spv::OpArrayLength:
	case spv::OpGenericPtrMemSemantics:
	case spv::OpInBoundsPtrAccessChain:
	case spv::OpVectorExtractDynamic:
	case spv::OpVectorInsertDynamic:
	case spv::OpVectorShuffle:
	case spv::OpCompositeConstruct:
	case spv::OpCompositeExtract:
	case spv::OpCompositeInsert:
	case spv::OpCopyObject:
	case spv::OpTranspose:
	case spv::OpSampledImage:
	case spv::OpImageSampleImplicitLod:
	case spv::OpImageSampleExplicitLod:
	case spv::OpImageSampleDrefImplicitLod:
	case spv::OpImageSampleDrefExplicitLod:
	case spv::OpImageSampleProjImplicitLod:
	case spv::OpImageSampleProjExplicitLod:
	case spv::OpImageSampleProjDrefImplicitLod:
	case spv::OpImageSampleProjDrefExplicitLod:
	case spv::OpImageFetch:
	case spv::OpImageGather:
	case spv::OpImageDrefGather:
	case spv::OpImageRead:
	case spv::OpImage:
	case spv::OpImageQueryFormat:
	case spv::OpImageQueryOrder:
	case spv::OpImageQuerySizeLod:
	case spv::OpImageQuerySize:
	case spv::OpImageQueryLod:
	case spv::OpImageQueryLevels:
	case spv::OpImageQuerySamples:
	case spv::OpConvertFToU:
	case spv::OpConvertFToS:
	case spv::OpConvertSToF:
	case spv::OpConvertUToF:
	case spv::OpUConvert:
	case spv::OpSConvert:
	case spv::OpFConvert:
	case spv::OpQuantizeToF16:
	case spv::OpConvertPtrToU:
	case spv::OpSatConvertSToU:
	case spv::OpSatConvertUToS:
	case spv::OpConvertUToPtr:
	case spv::OpPtrCastToGeneric:
	case spv::OpGenericCastToPtr:
	case spv::OpGenericCastToPtrExplicit:
	case spv::OpBitcast:
	case spv::OpSNegate:
	case spv::OpFNegate:
	case spv::OpIAdd:
	case spv::OpFAdd:
	case spv::OpISub:
	case spv::OpFSub:
	case spv::OpIMul:
	case spv::OpFMul:
	case spv::OpUDiv:
	case spv::OpSDiv:
	case spv::OpFDiv:
	case spv::OpUMod:
	case spv::OpSRem:
	case spv::OpSMod:
	case spv::OpFRem:
	case spv::OpFMod:
	case spv::OpVectorTimesScalar:
	case spv::OpMatrixTimesScalar:
	case spv::OpVectorTimesMatrix:
	case spv::OpMatrixTimesVector:
	case spv::OpMatrixTimesMatrix:
	case spv::OpOuterProduct:
	case spv::OpDot:
	case spv::OpIAddCarry:
	case spv::OpISubBorrow:
	case spv::OpUMulExtended:
	case spv::OpSMulExtended:
	case spv::OpAny:
	case spv::OpAll:
	case spv::OpIsNan:
	case spv::OpIsInf:
	case spv::OpIsFinite:
	case spv::OpIsNormal:
	case spv::OpSignBitSet:
	case spv::OpLessOrGreater:
	case spv::OpOrdered:
	case spv::OpUnordered:
	case spv::OpLogicalEqual:
	case spv::OpLogicalNotEqual:
	case spv::OpLogicalOr:
	case spv::OpLogicalAnd:
	case spv::OpLogicalNot:
	case spv::OpSelect:
	case spv::OpIEqual:
	case spv::OpINotEqual:
	case spv::OpUGreaterThan:
	case spv::OpSGreaterThan:
	case spv::OpUGreaterThanEqual:
	case spv::OpSGreaterThanEqual:
	case spv::OpULessThan:
	case spv::OpSLessThan:
	case spv::OpULessThanEqual:
	case spv::OpSLessThanEqual:
	case spv::OpFOrdEqual:
	case spv::OpFUnordEqual:
	case spv::OpFOrdNotEqual:
	case spv::OpFUnordNotEqual:
	case spv::OpFOrdLessThan:
	case spv::OpFUnordLessThan:
	case spv::OpFOrdGreaterThan:
	case spv::OpFUnordGreaterThan:
	case spv::OpFOrdLessThanEqual:
	case spv::OpFUnordLessThanEqual:
	case spv::OpFOrdGreaterThanEqual:
	case spv::OpFUnordGreaterThanEqual:
	case spv::OpShiftRightLogical:
	case spv::OpShiftRightArithmetic:
	case spv::OpShiftLeftLogical:
	case spv::OpBitwiseOr:
	case spv::OpBitwiseXor:
	case spv::OpBitwiseAnd:
	case spv::OpNot:
	case spv::OpBitFieldInsert:
	case spv::OpBitFieldSExtract:
	case spv::OpBitFieldUExtract:
	case spv::OpBitReverse:
	case spv::OpBitCount:
	case spv::OpDPdx:
	case spv::OpDPdy:
	case spv::OpFwidth:
	case spv::OpDPdxFine:
	case spv::OpDPdyFine:
	case spv::OpFwidthFine:
	case spv::OpDPdxCoarse:
	case spv::OpDPdyCoarse:
	case spv::OpFwidthCoarse:
	case spv::OpAtomicLoad:
	case spv::OpAtomicExchange:
	case spv::OpAtomicCompareExchange:
	case spv::OpAtomicCompareExchangeWeak:
	case spv::OpAtomicIIncrement:
	case spv::OpAtomicIDecrement:
	case spv::OpAtomicIAdd:
	case spv::OpAtomicISub:
	case spv::OpAtomicSMin:
	case spv::OpAtomicUMin:
	case spv::OpAtomicSMax:
	case spv::OpAtomicUMax:
	case spv::OpAtomicAnd:
	case spv::OpAtomicOr:
	case spv::OpAtomicXor:
	case spv::OpPhi:
	case spv::OpGroupAsyncCopy:
	case spv::OpGroupAll:
	case spv::OpGroupAny:
	case spv::OpGroupBroadcast:
	case spv::OpGroupIAdd:
	case spv::OpGroupFAdd:
	case spv::OpGroupFMin:
	case spv::OpGroupUMin:
	case spv::OpGroupSMin:
	case spv::OpGroupFMax:
	case spv::OpGroupUMax:
	case spv::OpGroupSMax:
	case spv::OpReadPipe:
	case spv::OpWritePipe:
	case spv::OpReservedReadPipe:
	case spv::OpReservedWritePipe:
	case spv::OpReserveReadPipePackets:
	case spv::OpReserveWritePipePackets:
	case spv::OpIsValidReserveId:
	case spv::OpGetNumPipePackets:
	case spv::OpGetMaxPipePackets:
	case spv::OpGroupReserveReadPipePackets:
	case spv::OpGroupReserveWritePipePackets:
	case spv::OpEnqueueMarker:
	case spv::OpEnqueueKernel:
	case spv::OpGetKernelNDrangeSubGroupCount:
	case spv::OpGetKernelNDrangeMaxSubGroupSize:
	case spv::OpGetKernelWorkGroupSize:
	case spv::OpGetKernelPreferredWorkGroupSizeMultiple:
	case spv::OpCreateUserEvent:
	case spv::OpIsValidEvent:
	case spv::OpGetDefaultQueue:
	case spv::OpBuildNDRange:
	case spv::OpImageSparseSampleImplicitLod:
	case spv::OpImageSparseSampleExplicitLod:
	case spv::OpImageSparseSampleDrefImplicitLod:
	case spv::OpImageSparseSampleDrefExplicitLod:
	case spv::OpImageSparseSampleProjImplicitLod:
	case spv::OpImageSparseSampleProjExplicitLod:
	case spv::OpImageSparseSampleProjDrefImplicitLod:
	case spv::OpImageSparseSampleProjDrefExplicitLod:
	case spv::OpImageSparseFetch:
	case spv::OpImageSparseGather:
	case spv::OpImageSparseDrefGather:
	case spv::OpImageSparseTexelsResident:
	case spv::OpAtomicFlagTestAndSet:
	case spv::OpImageSparseRead:
	case spv::OpSizeOf:
	case spv::OpConstantPipeStorage:
	case spv::OpCreatePipeFromPipeStorage:
	case spv::OpGetKernelLocalSizeForSubgroupCount:
	case spv::OpGetKernelMaxNumSubgroups:
	case spv::OpNamedBarrierInitialize:
	case spv::OpGroupNonUniformElect:
	case spv::OpGroupNonUniformAll:
	case spv::OpGroupNonUniformAny:
	case spv::OpGroupNonUniformAllEqual:
	case spv::OpGroupNonUniformBroadcast:
	case spv::OpGroupNonUniformBroadcastFirst:
	case spv::OpGroupNonUniformBallot:
	case spv::OpGroupNonUniformInverseBallot:
	case spv::OpGroupNonUniformBallotBitExtract:
	case spv::OpGroupNonUniformBallotBitCount:
	case spv::OpGroupNonUniformBallotFindLSB:
	case spv::OpGroupNonUniformBallotFindMSB:
	case spv::OpGroupNonUniformShuffle:
	case spv::OpGroupNonUniformShuffleXor:
	case spv::OpGroupNonUniformShuffleUp:
	case spv::OpGroupNonUniformShuffleDown:
	case spv::OpGroupNonUniformIAdd:
	case spv::OpGroupNonUniformFAdd:
	case spv::OpGroupNonUniformIMul:
	case spv::OpGroupNonUniformFMul:
	case spv::OpGroupNonUniformSMin:
	case spv::OpGroupNonUniformUMin:
	case spv::OpGroupNonUniformFMin:
	case spv::OpGroupNonUniformSMax:
	case spv::OpGroupNonUniformUMax:
	case spv::OpGroupNonUniformFMax:
	case spv::OpGroupNonUniformBitwiseAnd:
	case spv::OpGroupNonUniformBitwiseOr:
	case spv::OpGroupNonUniformBitwiseXor:
	case spv::OpGroupNonUniformLogicalAnd:
	case spv::OpGroupNonUniformLogicalOr:
	case spv::OpGroupNonUniformLogicalXor:
	case spv::OpGroupNonUniformQuadBroadcast:
	case spv::OpGroupNonUniformQuadSwap:
	case spv::OpSubgroupBallotKHR:
	case spv::OpSubgroupFirstInvocationKHR:
	case spv::OpSubgroupAllKHR:
	case spv::OpSubgroupAnyKHR:
	case spv::OpSubgroupAllEqualKHR:
	case spv::OpSubgroupReadInvocationKHR:
	case spv::OpGroupIAddNonUniformAMD:
	case spv::OpGroupFAddNonUniformAMD:
	case spv::OpGroupFMinNonUniformAMD:
	case spv::OpGroupUMinNonUniformAMD:
	case spv::OpGroupSMinNonUniformAMD:
	case spv::OpGroupFMaxNonUniformAMD:
	case spv::OpGroupUMaxNonUniformAMD:
	case spv::OpGroupSMaxNonUniformAMD:
	case spv::OpFragmentMaskFetchAMD:
	case spv::OpFragmentFetchAMD:
	case spv::OpSubgroupShuffleINTEL:
	case spv::OpSubgroupShuffleDownINTEL:
	case spv::OpSubgroupShuffleUpINTEL:
	case spv::OpSubgroupShuffleXorINTEL:
	case spv::OpSubgroupBlockReadINTEL:
	case spv::OpSubgroupImageBlockReadINTEL:
		return true;
	default:
		return false;
	}
}

// Returns true if an operation's arg'th parameter is an id.
// (If not, it may be a litteral, an enum, or some other thing).
constexpr bool is_input_id(spv::Op op, uint32_t arg)
{
	switch (op)
	{
	case spv::OpNop:
		return false;
	case spv::OpUndef:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSourceContinued:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSource:
	{
		auto is_id_ref = { false, false, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSourceExtension:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpName:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemberName:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpString:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLine:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpExtension:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpExtInstImport:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpExtInst:
	{
		auto is_id_ref = { false, false, true, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemoryModel:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpEntryPoint:
	{
		auto is_id_ref = { false, true, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpExecutionMode:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCapability:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeVoid:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeBool:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeInt:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeFloat:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeVector:
	{
		auto is_id_ref = { false, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeMatrix:
	{
		auto is_id_ref = { false, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeImage:
	{
		auto is_id_ref = { false, true, false, false, false, false, false, false, false };
		if (arg >= 9)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeSampler:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeSampledImage:
	{
		auto is_id_ref = { false, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeArray:
	{
		auto is_id_ref = { false, true, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeRuntimeArray:
	{
		auto is_id_ref = { false, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeStruct:
	{
		auto is_id_ref = { false, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeOpaque:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypePointer:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeFunction:
	{
		auto is_id_ref = { false, true, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeEvent:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeDeviceEvent:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeReserveId:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeQueue:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypePipe:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeForwardPointer:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantTrue:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantFalse:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstant:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantComposite:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantSampler:
	{
		auto is_id_ref = { false, false, false, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantNull:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSpecConstantTrue:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSpecConstantFalse:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSpecConstant:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSpecConstantComposite:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSpecConstantOp:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFunction:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFunctionParameter:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFunctionEnd:
		return false;
	case spv::OpFunctionCall:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVariable:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageTexelPointer:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLoad:
	{
		auto is_id_ref = { false, false, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpStore:
	{
		auto is_id_ref = { true, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCopyMemory:
	{
		auto is_id_ref = { true, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCopyMemorySized:
	{
		auto is_id_ref = { true, true, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAccessChain:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpInBoundsAccessChain:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpPtrAccessChain:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpArrayLength:
	{
		auto is_id_ref = { false, false, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGenericPtrMemSemantics:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpInBoundsPtrAccessChain:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDecorate:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemberDecorate:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDecorationGroup:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupDecorate:
	{
		auto is_id_ref = { true, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupMemberDecorate:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVectorExtractDynamic:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVectorInsertDynamic:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVectorShuffle:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCompositeConstruct:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCompositeExtract:
	{
		auto is_id_ref = { false, false, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCompositeInsert:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCopyObject:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTranspose:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSampledImage:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleDrefImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleDrefExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleProjImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleProjExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleProjDrefImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSampleProjDrefExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageFetch:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageGather:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageDrefGather:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageRead:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageWrite:
	{
		auto is_id_ref = { true, true, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImage:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQueryFormat:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQueryOrder:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQuerySizeLod:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQuerySize:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQueryLod:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQueryLevels:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageQuerySamples:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertFToU:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertFToS:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertSToF:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertUToF:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUConvert:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSConvert:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFConvert:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpQuantizeToF16:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertPtrToU:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSatConvertSToU:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSatConvertUToS:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConvertUToPtr:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpPtrCastToGeneric:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGenericCastToPtr:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGenericCastToPtrExplicit:
	{
		auto is_id_ref = { false, false, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitcast:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSNegate:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFNegate:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIAdd:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFAdd:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpISub:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFSub:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIMul:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFMul:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUDiv:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSDiv:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFDiv:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUMod:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSRem:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSMod:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFRem:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFMod:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVectorTimesScalar:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMatrixTimesScalar:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpVectorTimesMatrix:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMatrixTimesVector:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMatrixTimesMatrix:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpOuterProduct:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDot:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIAddCarry:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpISubBorrow:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUMulExtended:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSMulExtended:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAny:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAll:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsNan:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsInf:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsFinite:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsNormal:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSignBitSet:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLessOrGreater:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpOrdered:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUnordered:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLogicalEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLogicalNotEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLogicalOr:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLogicalAnd:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLogicalNot:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSelect:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpINotEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUGreaterThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSGreaterThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUGreaterThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSGreaterThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpULessThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSLessThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpULessThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSLessThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdNotEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordNotEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdLessThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordLessThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdGreaterThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordGreaterThan:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdLessThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordLessThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFOrdGreaterThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFUnordGreaterThanEqual:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpShiftRightLogical:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpShiftRightArithmetic:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpShiftLeftLogical:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitwiseOr:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitwiseXor:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitwiseAnd:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpNot:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitFieldInsert:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitFieldSExtract:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitFieldUExtract:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitReverse:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBitCount:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdx:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdy:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFwidth:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdxFine:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdyFine:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFwidthFine:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdxCoarse:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDPdyCoarse:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFwidthCoarse:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpEmitVertex:
		return false;
	case spv::OpEndPrimitive:
		return false;
	case spv::OpEmitStreamVertex:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpEndStreamPrimitive:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpControlBarrier:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemoryBarrier:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicLoad:
	{
		auto is_id_ref = { false, false, true, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicStore:
	{
		auto is_id_ref = { true, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicExchange:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicCompareExchange:
	{
		auto is_id_ref = { false, false, true, false, false, false, true, true };
		if (arg >= 8)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicCompareExchangeWeak:
	{
		auto is_id_ref = { false, false, true, false, false, false, true, true };
		if (arg >= 8)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicIIncrement:
	{
		auto is_id_ref = { false, false, true, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicIDecrement:
	{
		auto is_id_ref = { false, false, true, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicIAdd:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicISub:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicSMin:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicUMin:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicSMax:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicUMax:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicAnd:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicOr:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicXor:
	{
		auto is_id_ref = { false, false, true, false, false, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpPhi:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLoopMerge:
	{
		auto is_id_ref = { true, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSelectionMerge:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLabel:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBranch:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBranchConditional:
	{
		auto is_id_ref = { true, true, true, false };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSwitch:
	{
		auto is_id_ref = { true, true, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpKill:
		return false;
	case spv::OpReturn:
		return false;
	case spv::OpReturnValue:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpUnreachable:
		return false;
	case spv::OpLifetimeStart:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpLifetimeStop:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupAsyncCopy:
	{
		auto is_id_ref = { false, false, false, true, true, true, true, true };
		if (arg >= 8)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupWaitEvents:
	{
		auto is_id_ref = { false, true, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupAll:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupAny:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupBroadcast:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupIAdd:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFAdd:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFMin:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupUMin:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupSMin:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFMax:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupUMax:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupSMax:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReadPipe:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpWritePipe:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReservedReadPipe:
	{
		auto is_id_ref = { false, false, true, true, true, true, true, true };
		if (arg >= 8)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReservedWritePipe:
	{
		auto is_id_ref = { false, false, true, true, true, true, true, true };
		if (arg >= 8)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReserveReadPipePackets:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReserveWritePipePackets:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCommitReadPipe:
	{
		auto is_id_ref = { true, true, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCommitWritePipe:
	{
		auto is_id_ref = { true, true, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsValidReserveId:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetNumPipePackets:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetMaxPipePackets:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupReserveReadPipePackets:
	{
		auto is_id_ref = { false, false, false, true, true, true, true };
		if (arg >= 7)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupReserveWritePipePackets:
	{
		auto is_id_ref = { false, false, false, true, true, true, true };
		if (arg >= 7)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupCommitReadPipe:
	{
		auto is_id_ref = { false, true, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupCommitWritePipe:
	{
		auto is_id_ref = { false, true, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpEnqueueMarker:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpEnqueueKernel:
	{
		auto is_id_ref = { false, false, true, true, true, true, true, true, true, true, true, true, true };
		if (arg >= 13)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelNDrangeSubGroupCount:
	{
		auto is_id_ref = { false, false, true, true, true, true, true };
		if (arg >= 7)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelNDrangeMaxSubGroupSize:
	{
		auto is_id_ref = { false, false, true, true, true, true, true };
		if (arg >= 7)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelWorkGroupSize:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelPreferredWorkGroupSizeMultiple:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpRetainEvent:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpReleaseEvent:
	{
		auto is_id_ref = { true };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCreateUserEvent:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpIsValidEvent:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSetUserEventStatus:
	{
		auto is_id_ref = { true, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCaptureEventProfilingInfo:
	{
		auto is_id_ref = { true, true, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetDefaultQueue:
	{
		auto is_id_ref = { false, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpBuildNDRange:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleDrefImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleDrefExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleProjImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleProjExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleProjDrefImplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseSampleProjDrefExplicitLod:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseFetch:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseGather:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseDrefGather:
	{
		auto is_id_ref = { false, false, true, true, true, false };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseTexelsResident:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpNoLine:
		return false;
	case spv::OpAtomicFlagTestAndSet:
	{
		auto is_id_ref = { false, false, true, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpAtomicFlagClear:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpImageSparseRead:
	{
		auto is_id_ref = { false, false, true, true, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSizeOf:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypePipeStorage:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpConstantPipeStorage:
	{
		auto is_id_ref = { false, false, false, false, false };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpCreatePipeFromPipeStorage:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelLocalSizeForSubgroupCount:
	{
		auto is_id_ref = { false, false, true, true, true, true, true };
		if (arg >= 7)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGetKernelMaxNumSubgroups:
	{
		auto is_id_ref = { false, false, true, true, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpTypeNamedBarrier:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpNamedBarrierInitialize:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemoryNamedBarrier:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpModuleProcessed:
	{
		auto is_id_ref = { false };
		if (arg >= 1)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpExecutionModeId:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDecorateId:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformElect:
	{
		auto is_id_ref = { false, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformAll:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformAny:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformAllEqual:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBroadcast:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBroadcastFirst:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBallot:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformInverseBallot:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBallotBitExtract:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBallotBitCount:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBallotFindLSB:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBallotFindMSB:
	{
		auto is_id_ref = { false, false, false, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformShuffle:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformShuffleXor:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformShuffleUp:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformShuffleDown:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformIAdd:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformFAdd:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformIMul:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformFMul:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformSMin:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformUMin:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformFMin:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformSMax:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformUMax:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformFMax:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBitwiseAnd:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBitwiseOr:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformBitwiseXor:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformLogicalAnd:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformLogicalOr:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformLogicalXor:
	{
		auto is_id_ref = { false, false, false, false, true, true };
		if (arg >= 6)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformQuadBroadcast:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupNonUniformQuadSwap:
	{
		auto is_id_ref = { false, false, false, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupBallotKHR:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupFirstInvocationKHR:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupAllKHR:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupAnyKHR:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupAllEqualKHR:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupReadInvocationKHR:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupIAddNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFAddNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFMinNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupUMinNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupSMinNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupFMaxNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupUMaxNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpGroupSMaxNonUniformAMD:
	{
		auto is_id_ref = { false, false, false, false, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFragmentMaskFetchAMD:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpFragmentFetchAMD:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupShuffleINTEL:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupShuffleDownINTEL:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupShuffleUpINTEL:
	{
		auto is_id_ref = { false, false, true, true, true };
		if (arg >= 5)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupShuffleXorINTEL:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupBlockReadINTEL:
	{
		auto is_id_ref = { false, false, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupBlockWriteINTEL:
	{
		auto is_id_ref = { true, true };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupImageBlockReadINTEL:
	{
		auto is_id_ref = { false, false, true, true };
		if (arg >= 4)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpSubgroupImageBlockWriteINTEL:
	{
		auto is_id_ref = { true, true, true };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpDecorateStringGOOGLE:
	{
		auto is_id_ref = { true, false };
		if (arg >= 2)
			return false;
		return is_id_ref.begin()[arg];
	}
	case spv::OpMemberDecorateStringGOOGLE:
	{
		auto is_id_ref = { true, false, false };
		if (arg >= 3)
			return false;
		return is_id_ref.begin()[arg];
	}

	default:
		return false;
	}
}

} // namespace spirv_cross

#endif
